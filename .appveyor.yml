environment:
  matrix:
      # Main VM variants
    - FLAVOR: squeak.cog.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: squeak.cog.spur
      ARCH: win64x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
    - FLAVOR: pharo.cog.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: pharo.cog.spur
      ARCH: win64x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64

      # Main minheadless VM variants.
    - FLAVOR: squeak.cog.spur
      ARCH: win32x86
      CPU_ARCH: x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
      BUILD_WITH_CMAKE: yes
    - FLAVOR: squeak.cog.spur
      ARCH: win64x64
      CPU_ARCH: x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
      BUILD_WITH_CMAKE: yes
    - FLAVOR: pharo.cog.spur
      ARCH: win32x86
      CPU_ARCH: x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
      BUILD_WITH_CMAKE: yes
    - FLAVOR: pharo.cog.spur
      ARCH: win64x64
      CPU_ARCH: x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
      BUILD_WITH_CMAKE: yes

      # Minheadless VM variants with SDL2 based support for traditional display.
    - FLAVOR: squeak.cog.spur+sdl2
      ARCH: win32x86
      CPU_ARCH: x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
      BUILD_WITH_CMAKE: yes
    - FLAVOR: squeak.cog.spur+sdl2
      ARCH: win64x64
      CPU_ARCH: x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
      BUILD_WITH_CMAKE: yes
    - FLAVOR: pharo.cog.spur+sdl2
      ARCH: win32x86
      CPU_ARCH: x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
      BUILD_WITH_CMAKE: yes
    - FLAVOR: pharo.cog.spur+sdl2
      ARCH: win64x64
      CPU_ARCH: x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
      BUILD_WITH_CMAKE: yes

      # Other VM variants
    - FLAVOR: squeak.sista.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: squeak.cog.spur.lowcode
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: squeak.cog.v3
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: squeak.stack.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: squeak.stack.v3
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: pharo.sista.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: pharo.cog.spur.lowcode
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: newspeak.cog.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    - FLAVOR: newspeak.stack.spur
      ARCH: win32x86
      CYG_ROOT: C:\cygwin
      MINGW_ARCH: i686
    # - FLAVOR: pharo.sista.spur
    #   ARCH: win64x64
    #   CYG_ROOT: C:\cygwin64
    #   MINGW_ARCH: x86_64
    - FLAVOR: newspeak.cog.spur
      ARCH: win64x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
    - FLAVOR: squeak.stack.spur
      ARCH: win64x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64
    # - FLAVOR: pharo.stack.spur
    #   ARCH: win64x64
    #   CYG_ROOT: C:\cygwin64
    #   MINGW_ARCH: x86_64
    - FLAVOR: newspeak.stack.spur
      ARCH: win64x64
      CYG_ROOT: C:\cygwin64
      MINGW_ARCH: x86_64


matrix:
  fast_finish: true
  allow_failures:
    - FLAVOR: squeak.sista.spur
    - FLAVOR: pharo.sista.spur
    - FLAVOR: squeak.cog.spur.lowcode
    - FLAVOR: pharo.cog.spur.lowcode

notifications:
  - provider: Email
    to:
      - vm-dev@lists.squeakfoundation.org
    on_build_success: false

platform:
  - x86

clone_depth: 5

cache:
  - .thirdparty-cache

install:
<<<<<<< HEAD
  - ps: 'Start-FileDownload "http://cygwin.com/setup-x86.exe" -FileName "setup-x86.exe"'
  - ps: 'Start-FileDownload "http://cygwin.com/setup-x86_64.exe" -FileName "setup-x86_64.exe"'
  - '%CYG_SETUP% -dgnqNO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_ROOT%\var\cache\setup" -P mingw64-%MINGW_ARCH%-gcc-core,mingw64-%MINGW_ARCH%-gcc-g++,mingw64-%MINGW_ARCH%-headers,mingw64-%MINGW_ARCH%-runtime,zip,mingw64-%MINGW_ARCH%-clang,libiconv-devel,libglib2.0-devel,perl,mingw64-%MINGW_ARCH%-zlib,cmake,mingw64-%MINGW_ARCH%-win-iconv'

# Mingw has a default embedded manifest now, which is poisonous, but we cannot uninstall because the package is a hard dependency.
# Absence of the file is ok tho.
#  - '%CYG_SETUP% -dgnqNO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_ROOT%\var\cache\setup" -x mingw64-%MINGW_ARCH%-windows-default-manifest'

build: false
=======
  # Search for [appveyor skip], [skip appveyor], [skip ci] or [ci skip] and exit if found in full commit message
  - ps: $commit=$env:APPVEYOR_REPO_COMMIT_MESSAGE + $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
  - ps: If ($commit.Contains("[skip appveyor]") -Or $commit.Contains("[appveyor skip]")) { Exit-AppVeyorBuild }
  - ps: $commit=$env:APPVEYOR_REPO_COMMIT_MESSAGE + $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
  - ps: If ($commit.Contains("[skip ci]") -Or $commit.Contains("[ci skip]")) { Exit-AppVeyorBuild }
  - 'curl -fsSL --retry 4 -m 600 -o "setup-x86.exe" "http://cygwin.com/setup-x86.exe" '
  - 'curl -fsSL --retry 4 -m 600 -o "setup-x86_64.exe" "http://cygwin.com/setup-x86_64.exe" '
  - 'call scripts/installCygwin.bat %MINGW_ARCH% "%CYG_ROOT%"'
>>>>>>> origin/Cog

# Cygwin build script
#
# NOTES:
#
# The stdin/stdout file descriptor appears not to be valid for the Appveyor
# build which causes failures as certain functions attempt to redirect
# default file handles. Ensure a dummy file descriptor is opened with 'exec'.
build_script:
  - '%CYG_ROOT%\bin\bash -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; exec ./scripts/ci/travis_build.sh"'

# Using `after_build` instead of `before_deploy` and `deploy_script`.
#  `before_deploy` is only invoked if the deployment provider is triggered.
#  `deploy_script` is mutually exclusive to `deploy`.
# In addition, the vm needs to be packed before artifacts are collected.
after_build:
  - '%CYG_ROOT%\bin\bash -lc "cd $APPVEYOR_BUILD_FOLDER/deploy; exec 0</dev/null; exec ./filter-exec.sh pack-vm.sh"'
  - '%CYG_ROOT%\bin\bash -lc "cd $APPVEYOR_BUILD_FOLDER/deploy; exec 0</dev/null; exec ./filter-exec.sh bintray.sh"'
  - '%CYG_ROOT%\bin\bash -lc "cd $APPVEYOR_BUILD_FOLDER/deploy/pharo; exec 0</dev/null; exec ./filter-exec.sh deploy.sh"'

test: off

artifacts:
  - path: products\*.zip
    name: osvm

deploy:
  provider: GitHub # Deploy stable tags to GitHub releases
  description: 'Automatic release'
  auth_token:
    secure: SOq4LiXFepptbgPZ4w2McefZOsRRAy8u88/+dpNof57BG4gYTvyESV1EB4CXTXjX
  artifact: osvm
  on:
    appveyor_repo_tag: true
