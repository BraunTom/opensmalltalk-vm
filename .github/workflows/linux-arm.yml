name: Build for Linux (ARM)

on:
  push: # All branches, but appropriate paths only.
    paths:
      # This workflow spec and its support scripts
      - '.github/workflows/linux-arm.yml'
      - 'scripts/ci/*linux_arm.sh'
      - 'scripts/ci/*build.sh'
      - 'deploy/**'
      # Relevant sources for this platform
      - 'build.linux*/**' # Makefile-based build scripts
      - '*src/**' # Generated VMMaker sources (incl. plugins)
      - 'platforms/Cross/**'
      - 'platforms/unix/**'
      # Skip documentation
      - '!**.md'
      - '!**HowToBuild'
  pull_request:
    branches:
      - Cog
    paths-ignore:
      - '**.md'
      - '**HowToBuild'


jobs:
  build:
    strategy:
      fail-fast: false # let them finish bc. mixed platforms
      matrix:
        arch:
          - linux32ARMv6
          # - linux32ARMv7 # Newspeak only, see "include:" below
          # - linux64ARMv8
        flavor:
          - squeak.cog.spur
          # - squeak.stack.spur
        mode:
          - fast
          # - debug
          # - assert
        # include:
        #   # Only Newspeak is configured for ARMv7
        #   - arch: linux32ARMv7
        #     flavor: newspeak.cog.spur
        #     mode: fast
        #   - arch: linux32ARMv7
        #     flavor: newspeak.stack.spur
        #     mode: fast
        #   # Some other flavors for backwards compatibility
        #   - arch: linux32ARMv6
        #     flavor: pharo.cog.spur
        #     mode: fast
        #   - arch: linux32ARMv6
        #     flavor: squeak.cog.v3
        #     mode: fast
        #   - arch: linux32ARMv6
        #     flavor: squeak.stack.v3
        #     mode: fast

    runs-on: ubuntu-latest
    name: ${{ matrix.flavor }} for ${{ matrix.arch }}${{ matrix.mode == 'debug' && ' (DEBUG)' || matrix.mode == 'assert' && ' (ASSERT)' || '' }}
    env:
      ARCH: ${{ matrix.arch }}
      ARCH_ARM: ${{ matrix.arch == 'linux32ARMv6' && 'armv6' || matrix.arch == 'linux32ARMv7' && 'armv7' || 'aarch64' }}
      FLAVOR: ${{ matrix.flavor }}
      MODE: ${{ matrix.mode }}
      HEARTBEAT: threaded # itimer not supported
    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      # - name: Restore build cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .thirdparty-cache
      #     key: thirdparty-cache-linux-arm

      # - name: Setup tmate debugging session
        # uses: mxschmitt/action-tmate@v3

      - run: |
          echo "BEFORE 1!"
          echo "GITHUB_ENV=$GITHUB_ENV"

      - run: |
          echo "BEFORE 2!"
          echo "GITHUB_ENV=$GITHUB_ENV"

      # https://github.com/marketplace/actions/run-on-architecture
      - name: Build VM
        uses: uraimo/run-on-arch-action@v2.1.1
        id: build-vm
        with: 
          arch: ${{ env.ARCH_ARM }}
          distro: buster
          # install: |
          #   echo "Installing!"
          #   echo "GITHUB_ENV=$GITHUB_ENV"
          setup: |
            echo "Setting up!"
            echo "GITHUB_ENV=$GITHUB_ENV"
          run: |
            echo "Running!"
            FOO=42
            echo "GITHUB_ENV=$GITHUB_ENV"
      - run: |
          echo "Back again!"
          echo "FOO=$FOO"
          echo "GITHUB_ENV=$GITHUB_ENV"

        # install: |
        #   apt update -y
        #   apt install -yq --no-install-suggests --no-install-recommends   build-essential git devscripts   uuid-dev libcairo2-dev libpango1.0-dev libgl1-mesa-dev libgl1-mesa-glx libssl-dev libevdev-dev m4 libpulse-dev   libasound2-dev libfreetype6-dev libx11-dev libxrender-dev   libtool automake autoconf libltdl-dev
 
# Other packages:
# uuid-runtime libsm-dev libice-dev cmake 

      #     env: | # Copy the entire environment for the docker container
      #       RUNNER_OS: Linux
      #       ARCH: ${{ env.ARCH }}
      #       ARCH_ARM: ${{ env.ARCH_ARM }}
      #       FLAVOR: ${{ env.FLAVOR }}
      #       MODE: ${{ env.MODE }}
      #       HEARTBEAT: ${{ env.HEARTBEAT }}

      #     run: ./scripts/ci/actions_build.sh

      # - name: Post Build VM
      #   run: |
      #     sudo chown -R runner ${{ steps.build-vm.outputs.PRODUCTS_PATH }}
      #     echo "ASSET_REVISION=${{ steps.build-vm.outputs.ASSET_REVISION }}" >> $GITHUB_ENV
      #     echo "ASSET_NAME=${{ steps.build-vm.outputs.ASSET_NAME }}" >> $GITHUB_ENV
      #     echo "PRODUCTS_PATH=${{ steps.build-vm.outputs.PRODUCTS_PATH }}" >> $GITHUB_ENV
      #     echo "APP_NAME=${{ steps.build-vm.outputs.APP_NAME }}" >> $GITHUB_ENV

      # - name: Sign VM (not implemented)
      #   if: false
      #   run: ./deploy/sign-vm.sh

      # - name: Pack VM
      #   run: ./deploy/pack-vm.sh

      # - name: Store artifact w/ revision
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.ASSET_NAME }}_${{ env.ASSET_REVISION }}
      #     path: ${{ env.PRODUCTS_PATH }}/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}

      # - name: Update artifact in latest-release
      #   uses: ncipollo/release-action@v1.8.6
      #   if: github.event_name == 'push' && endsWith( github.ref , 'Cog' )
      #   with:
      #     prerelease: true
      #     allowUpdates: true
      #     replacesArtifacts: true
      #     artifacts: ${{ env.PRODUCTS_PATH }}/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ matrix.mode == 'debug' && 'latest-debug-build' || matrix.mode == 'assert' && 'latest-assert-build' || 'latest-build' }}
      #     body: ${{ github.event.head_commit.message }}
