name: Build for Linux (ARM)

on:
  push: # All branches, but appropriate paths only.
    paths:
      # This workflow spec and its support scripts
      - '.github/workflows/linux-arm.yml'
      - 'scripts/ci/*linux_arm.sh'
      - 'scripts/ci/*build.sh'
      - 'deploy/**'
      # Relevant sources for this platform
      - 'build.linux*/**' # Makefile-based build scripts
      - '*src/**' # Generated VMMaker sources (incl. plugins)
      - 'platforms/Cross/**'
      - 'platforms/unix/**'
      # Skip documentation
      - '!**.md'
      - '!**HowToBuild'
  pull_request:
    branches:
      - Cog
    paths-ignore:
      - '**.md'
      - '**HowToBuild'


jobs:
  build:
    strategy:
      fail-fast: false # let them finish bc. mixed platforms
      matrix:
        arch:
          - linux32ARMv6
          # - linux32ARMv7 # Newspeak only, see "include:" below
          # - linux64ARMv8
        flavor:
          - squeak.cog.spur
          # - squeak.stack.spur
        mode:
          - fast
          # - debug
          # - assert
        # include:
        #   # Only Newspeak is configured for ARMv7
        #   - arch: linux32ARMv7
        #     flavor: newspeak.cog.spur
        #     mode: fast
        #   - arch: linux32ARMv7
        #     flavor: newspeak.stack.spur
        #     mode: fast
        #   # Some other flavors for backwards compatibility
        #   - arch: linux32ARMv6
        #     flavor: pharo.cog.spur
        #     mode: fast
        #   - arch: linux32ARMv6
        #     flavor: squeak.cog.v3
        #     mode: fast
        #   - arch: linux32ARMv6
        #     flavor: squeak.stack.v3
        #     mode: fast

    runs-on: ubuntu-latest
    name: ${{ matrix.flavor }} for ${{ matrix.arch }}${{ matrix.mode == 'debug' && ' (DEBUG)' || matrix.mode == 'assert' && ' (ASSERT)' || '' }}
    env:
      ARCH: ${{ matrix.arch }}
      ARCH_ARM: ${{ matrix.arch == 'linux32ARMv6' && 'armv6' || matrix.arch == 'linux32ARMv7' && 'armv7' || 'aarch64' }}
      FLAVOR: ${{ matrix.flavor }}
      MODE: ${{ matrix.mode }}
      HEARTBEAT: threaded # itimer not supported
    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      # TODO: Can we use the same thirdparty cache for armv6, armv7, and aarch64? Are pre-compiled binaries compatible or organized differently?
      - name: Restore build cache
        uses: actions/cache@v2
        with:
          path: .thirdparty-cache
          key: thirdparty-cache-linux-${{ env.ARCH_ARM }}

      # https://github.com/marketplace/actions/run-on-architecture
      - name: Build VM
        uses: uraimo/run-on-arch-action@v2.1.1
        id: build-vm
        with: 
          arch: ${{ env.ARCH_ARM }}
          distro: buster
          install: |
            echo "Installing!"
            ls -lisa
            echo "PWD=$(pwd)"
            ./scripts/ci/actions_prepare_linux_arm.sh
          env: | # Copy the entire environment for the docker container
            ARCH: ${{ env.ARCH }}
            ARCH_ARM: ${{ env.ARCH_ARM }}
            FLAVOR: ${{ env.FLAVOR }}
            MODE: ${{ env.MODE }}
            HEARTBEAT: ${{ env.HEARTBEAT }}
          run: ./scripts/ci/actions_build.sh

      - name: Post Build VM
        run: |
          sudo chown -R runner ${{ steps.build-vm.outputs.PRODUCTS_PATH }}
          echo "ASSET_REVISION=${{ steps.build-vm.outputs.ASSET_REVISION }}" >> $GITHUB_ENV
          echo "ASSET_NAME=${{ steps.build-vm.outputs.ASSET_NAME }}" >> $GITHUB_ENV
          echo "PRODUCTS_PATH=${{ steps.build-vm.outputs.PRODUCTS_PATH }}" >> $GITHUB_ENV
          echo "APP_NAME=${{ steps.build-vm.outputs.APP_NAME }}" >> $GITHUB_ENV

      - name: Sign VM (not implemented)
        if: false
        run: ./deploy/sign-vm.sh

      - name: Pack VM
        run: ./deploy/pack-vm.sh

      - name: Store artifact w/ revision
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ASSET_NAME }}_${{ env.ASSET_REVISION }}
          path: ${{ env.PRODUCTS_PATH }}/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}

      - name: Update artifact in latest-release
        uses: ncipollo/release-action@v1.8.6
        if: github.event_name == 'push' && endsWith( github.ref , 'Cog' )
        with:
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: ${{ env.PRODUCTS_PATH }}/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ matrix.mode == 'debug' && 'latest-debug-build' || matrix.mode == 'assert' && 'latest-assert-build' || 'latest-build' }}
          body: ${{ github.event.head_commit.message }}
