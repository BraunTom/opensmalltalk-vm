name: Build for Windows

on:
  push: # All branches, but appropriate paths only.
    paths:
      - '.github/workflows/win.yml' # This workflow spec
      - 'scripts/ci/*msys.sh' # Support scripts for this workflow
      - 'scripts/ci/*build.sh'
      - 'deploy/**'

      - 'build.win*/**' # Makefile-based build scripts
      - '*src/**' # Generated VMMaker sources (incl. plugins)
      - 'platforms/Cross/**'
      - 'platforms/win32/**'

      - '!**.md'
      - '!**HowToBuild'
  pull_request:
    branches:
      - Cog
    paths-ignore:
      - '**.md'
      - '**HowToBuild'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        arch: 
          - win64x64
          - win32x86
        flavor:
          - squeak.cog.spur
          - squeak.stack.spur
          # - pharo.cog.spur # third-party not yet working
          # - pharo.stack.spur # third-party not yet working
        mode:
          - fast
          - debug
          - assert
        include:
          # sista build not fully prepared for win64x64, so only your selected configurations for win32x86
          - arch: win32x86 
            flavor: squeak.sista.spur
            mode: fast
          # - arch: win32x86 
          #   flavor: pharo.sista.spur
          #   mode: fast

    runs-on: windows-latest
    name: ${{ matrix.flavor }} for ${{ matrix.arch }}${{ matrix.mode == 'debug' && ' (DEBUG)' || matrix.mode == 'assert' && ' (ASSERT)' || '' }}
    env:
      ARCH: ${{ matrix.arch }}
      FLAVOR: ${{ matrix.flavor }}
      MODE: ${{ matrix.mode }}
    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      - name: Restore build cache
        uses: actions/cache@v2
        with:
          path: .thirdparty-cache
          key: thirdparty-cache-win

      # - name: Setup tmate debugging session
        # uses: mxschmitt/action-tmate@v3

      - name: Build VM
        shell: bash
        run: ./scripts/ci/actions_build.sh
        # run: C:\msys64\usr\bin\bash -lc "cd $(pwd); exec ./scripts/ci/actions_build.sh"
        env:
          MSYS_SYS: ${{ matrix.arch == 'win64x64' && 'mingw64' || 'mingw32' }}
          MSYS_ENV: ${{ matrix.arch == 'win64x64' && 'x86_64' || 'i686' }}

      - name: Sign VM (not implemented)
        if: false
        run: ./deploy/sign-vm.sh

      - name: Pack VM
        shell: bash
        run: ./deploy/pack-vm.sh

      - name: Store artifact w/ revision
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ASSET_NAME }}_${{ env.ASSET_REVISION }}
          path: products/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}

      - name: Update artifact in latest-build
        uses: ncipollo/release-action@v1.8.6
        if: github.event_name == 'push' && endsWith(github.ref, 'Cog')
        with:
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: products/${{ env.ASSET_NAME }}.${{ env.ASSET_EXTENSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ matrix.mode == 'debug' && 'latest-debug-build' || matrix.mode == 'assert' && 'latest-assert-build' || 'latest-build' }}
          body: ${{ github.event.head_commit.message }}
